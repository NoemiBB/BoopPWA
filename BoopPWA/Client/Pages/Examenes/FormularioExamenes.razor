@inject IRepositorio repositorio
@inject NavigationManager navigation

<EditForm Model="examen" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label>Alumno</label>       
        <select class="form-control" @bind="examen.AlumnoId">
            <option value="0">--Seleccionar alumno--</option>
            @foreach (var item in alumnos)
            {
                <option value="@item.Id">@item.Nombre</option>
            }
        </select>
    </div>
    <div class="form-group">
        <label>Asignatura</label>
        <select class="form-control" @bind="examen.AsignaturaId">
            <option value="0">--Seleccionar asignatura--</option>
            @foreach (var item in asignaturas)
            {
                <option value="@item.Id">@item.Nombre</option>
            }
        </select>  
    </div>
    <div class="form-group">
        <label>Fecha:</label>
        <div>
            <InputDate class="form-control" @bind-Value="@examen.Fecha" />
            <ValidationMessage For="@(() => examen.Fecha)" />
        </div>
    </div>
    <div class="form-group">
        <label>Tema:</label>
        <div>
            <InputText class="form-control" @bind-Value="@examen.Tema" />
            <ValidationMessage For="@(() => examen.Tema)" />    
        </div>
    </div>

    <div class="form-group">
        <label>Nota:</label>
        <div>
            <InputText class="form-control" @bind-Value="@examen.Nota" />
            <ValidationMessage For="@(() => examen.Nota)" />
        </div>
    </div>
    <div class="form-group" >
        <InputTextArea class="form-control" @bind-Value="@examen.Observaciones" style="height:250px;"/>
        <ValidationMessage For="@(() => examen.Observaciones)" />

        @* class = form-markdown <InputMarkdown @bind-Value="@examen.Observaciones"
        For="@(() => examen.Observaciones)"
        Label="Observaciones" />*@
    </div>

    @*<div class="form-group">
            <label>Observaciones:</label>
            <div>
                <InputText class="form-control" @bind-Value="@examen.Observaciones" />
                <ValidationMessage For="@(() => examen.Observaciones)" />
            </div>
        </div>*@


    <button class="btn btn-success" type="submit">Guardar Cambios</button>
    <button class="btn btn-danger" type="button" @onclick="Cancelar">Cancelar</button>
</EditForm>

@code {
    [Parameter] public Examen examen { get; set; }
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private List<Alumno> alumnos = new List<Alumno>();
    private List<Asignatura> asignaturas = new List<Asignatura>();

    protected override async Task OnInitializedAsync()
    {
        await obtenerAlumnos();
        await obtenerAsignaturas();

    }

    private async Task obtenerAlumnos()
    {
        var httpResponse = await repositorio.Get<List<Alumno>>("api/alumnos");
        alumnos = httpResponse.Response;

    }
    private async Task obtenerAsignaturas()
    {
        var httpResponse = await repositorio.Get<List<Asignatura>>("api/asignaturas?pagina=0");
        asignaturas = httpResponse.Response;

    }
    async Task Cancelar() => await OnCancel.InvokeAsync(null);

}


